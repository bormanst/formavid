#!/bin/bash -e
# Copyright (C) 2018 Sean Borman <bormanst@gmail.com>.
# You should have received LICENSE.txt, a copy of the
# GNU General Public License, along with this program.
# If not, see <https://www.gnu.org/licenses/>.

PACKAGE=certbot

# check install
if [ "${CERTBOT_INSTALL}" != "True" ]; then
    MESSSAGE="default_envars:CERTBOT_INSTALL not set to 'True'. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    exit 0
fi

# notify post-install PACKAGE
MESSSAGE="The script ${PACKAGE} cannot run in parallel so it should be run post-install."
echo ${MESSSAGE} | tee -a ${LOG}

# check install
# log check
MESSSAGE="Checking dependencies for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# check packages
PKG_CHECK=${PACKAGE^^}
if [ -z "${!PKG_CHECK}" ]; then exit 0; fi

# dependencies check: apache2
DEPENDS=apache2
systemctl start ${DEPENDS} && sleep 10
if ! (systemctl -q is-active ${DEPENDS}); then
    MESSSAGE="Required service ${DEPENDS} not active. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! Please ensure that ${DEPENDS} is active."
    echo ""
    echo ""
    exit 0
fi

# check app dir
APP_DIR=/etc/letsencrypt/live/${APP_HOSTNAME}
if [ -d "${APP_DIR}" ]; then
    MESSSAGE="The ${APP_DIR} already exists. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! ${PACKAGE} may have already been initialized by this script."
    echo "WARNING! Re-running this script may corrupt existing system."
    echo "WARNING! Please review script for further details."
    echo ""
    echo ""
    exit 0
fi

# log configure
MESSSAGE="Configuring ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# create log files
PACKAGE_LOG_DIR=/var/log/letsencrypt
mkdir -p ${PACKAGE_LOG_DIR}

# apply overlay
OVERLAY_DIR=$1/overlay
if [ -d "${OVERLAY_DIR}" ]; then
    cp -rf ${OVERLAY_DIR}/* /
    MESSSAGE="Applied overlay for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
fi

# drupal project subdir
MESSSAGE="Configuring certs for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

WEB_ROOT=${PROJECT_DIR}/web

# get cert
# can add more webroots and domains that have DNS entries
# certbot certonly --cert-name ${APP_HOSTNAME} --webroot --agree-tos -m ${APP_EMAIL} -n -w ${WEB_ROOT} -d ${APP_HOSTNAME} -w /var/www/admin -d admin.${APP_HOSTNAME}
# --standalone method does not have dir perm issues that --webroot does
# need to stop apache2 for --standalone
# --apache uses apache2 plugin
# certbot certonly --cert-name ${APP_HOSTNAME} --apache --preferred-challenges http --agree-tos -m ${APP_EMAIL} -n -d ${APP_HOSTNAME} -d admin.${APP_HOSTNAME} -d billing.${APP_HOSTNAME} -d support.${APP_HOSTNAME}
certbot certonly --cert-name ${APP_HOSTNAME} --apache --preferred-challenges http --agree-tos -m ${APP_EMAIL} -n -d ${APP_HOSTNAME}

# update ssl.conf
CONF=/etc/apache2/mods-available/ssl.conf

# comment any old pems
sed -i '/^\s*SSLCertificateChainFile/s/^/#\ /g' ${CONF}
sed -i '/^\s*SSLCertificateKeyFile/s/^/#\ /g' ${CONF}
sed -i '/^\s*SSLCertificateFile/s/^/#\ /g' ${CONF}

# add new pems
sed -i "/SSLStrictSNIVHostCheck/a SSLCertificateChainFile /etc/letsencrypt/live/${APP_HOSTNAME}/fullchain.pem" ${CONF}
sed -i "/SSLStrictSNIVHostCheck/a SSLCertificateKeyFile /etc/letsencrypt/live/${APP_HOSTNAME}/privkey.pem" ${CONF}
sed -i "/SSLStrictSNIVHostCheck/a SSLCertificateFile /etc/letsencrypt/live/${APP_HOSTNAME}/cert.pem" ${CONF}

# update stunnel
CONF=/etc/stunnel/stunnel.conf
sed -i '/^\s*cert\ =\ /s/^/;\ /g' ${CONF}
sed -i "/^; cert =/a cert = /etc/letsencrypt/live/${APP_HOSTNAME}/fullchain.pem" ${CONF}
sed -i "/^; cert =/a key = /etc/letsencrypt/live/${APP_HOSTNAME}/privkey.pem" ${CONF}

# restart stunnel
systemctl restart stunnel4

# restart apache
systemctl restart apache2

# update postfix
postconf -e "smtpd_tls_cert_file = /etc/letsencrypt/live/${APP_HOSTNAME}/fullchain.pem"
postconf -e "smtpd_tls_cert_file = /etc/letsencrypt/live/${APP_HOSTNAME}/privkey.pem"
postconf -e "smtpd_tls_CAfile = /etc/letsencrypt/live/${APP_HOSTNAME}/cert.pem"
postfix reload

# update dovecot
CONF=/etc/dovecot/conf.d/10-ssl.conf
if [ -f "${CONF}" ]; then
    sed -i "s/^ssl_cert =\(.*\)/ssl_cert = <\/etc\/letsencrypt\/live\/${APP_HOSTNAME}\/fullchain.pem/" ${CONF}
    sed -i "s/^ssl_key =\(.*\)/ssl_key = <\/etc\/letsencrypt\/live\/${APP_HOSTNAME}\/privkey.pem/" ${CONF}
fi

# logrotate file for letsencrypt
MESSSAGE="Creating logrotate file for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

FILE=/etc/logrotate.d/letsencrypt
cat > ${FILE} <<EOF
# Logrotate file for letsencrypt

${PACKAGE_LOG_DIR}/*.log {
        weekly
        missingok
        rotate 4
        compress
        delaycompress
        notifempty
        create 640 root adm
}
EOF

# log completed
MESSSAGE="Package ${PACKAGE} install has completed."
echo ${MESSSAGE} | tee -a ${LOG}

exit 0
