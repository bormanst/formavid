#!/bin/bash -e
# Copyright (C) 2018 Sean Borman <bormanst@gmail.com>.
# You should have received LICENSE.txt, a copy of the
# GNU General Public License, along with this program.
# If not, see <https://www.gnu.org/licenses/>.

PACKAGE=drupal8

# log check
MESSSAGE="Check packages: ${PACKAGE}"
echo ${MESSSAGE} >> ${LOG}

# check packages
PKG_CHECK=${PACKAGE^^}
if [ -z "${!PKG_CHECK}" ]; then exit 0; fi

# set dirs
DRUPAL_DIR=${PACKAGE}
WWW_DIR=/var/www
APP_DIR=${WWW_DIR}/${DRUPAL_DIR}

# check dir
if [ -d "${APP_DIR}" ]; then
    MESSSAGE="The ${APP_DIR} already exists. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! ${PACKAGE} may have already been initialized by this script."
    echo "WARNING! Re-running this script may corrupt existing system."
    echo "WARNING! Please review script in applications/${PACKAGE} for further details."
    echo ""
    echo ""
    exit 0
fi

# dependencies check: apache2
DEPENDS=apache2
systemctl start ${DEPENDS} && sleep 10
if ! (systemctl -q is-active ${DEPENDS}); then
    MESSSAGE="Required service ${DEPENDS} not active. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! Please ensure that ${DEPENDS} is active."
    echo ""
    echo ""
    exit 0
fi

# dependencies check: mysql
DEPENDS=mysql
systemctl start ${DEPENDS} && sleep 10
if ! (systemctl -q is-active ${DEPENDS}); then
    MESSSAGE="Required service ${DEPENDS} not active. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! Please ensure that ${DEPENDS} is active."
    echo ""
    echo ""
    exit 0
fi

# dependencies check: php
DEPENDS=php
if ! (hash php); then
    MESSSAGE="Required service ${DEPENDS} not active. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! Please ensure that ${DEPENDS} is active."
    echo ""
    echo ""
    exit 0
fi

# log configure
MESSSAGE="Configuring ${PACKAGE}..."
echo ${MESSSAGE} >> ${LOG}

# add drupal8 user to database
mysql --user=root --password=${DB_PASS} --execute "CREATE USER drupal8@localhost IDENTIFIED BY '${APP_PASS}';"

# composer peformance issue
phpdismod xdebug

# make drupal dir
mkdir -p ${APP_DIR}

# set admin owner
chown admin:adm ${APP_DIR}

# apply composer files
OVERLAY_DIR=$1/overlay
if [ -d "${OVERLAY_DIR}" ]; then
    cp -f ${OVERLAY_DIR}${APP_DIR}/composer.* ${APP_DIR}
    chown admin:adm ${APP_DIR}/composer.*
    MESSSAGE="Applied composer files for ${APP_DIR}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
fi

# change to drupal dir
COMMAND="cd ${APP_DIR}"
su - admin -c "${COMMAND}"

# load composer console in drupal root
COMMAND="composer install -d ${APP_DIR} --no-progress --optimize-autoloader"
su - admin -c "${COMMAND}"

# drupal project subdir
PROJECT="prod"
PROJECT_DIR=${APP_DIR}/${PROJECT}

# create project template with --no-install
COMMAND="composer create-project -d ${APP_DIR} drupal-composer/drupal-project:8.x-dev ${PROJECT_DIR} --stability dev --no-install --no-progress --no-interaction"
su - admin -c "${COMMAND}"

# apply composer files
if [ -d "${OVERLAY_DIR}" ]; then
    cp -f ${OVERLAY_DIR}${PROJECT_DIR}/composer.* ${PROJECT_DIR}
    chown admin:adm ${PROJECT_DIR}/composer.*
    MESSSAGE="Applied composer files for ${PROJECT_DIR}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
fi

# change to project subdir
COMMAND="cd ${PROJECT_DIR}"
su - admin -c "${COMMAND}"

# download and install
COMMAND="composer install -d ${PROJECT_DIR} --no-progress --optimize-autoloader"
su - admin -c "${COMMAND}"

# enable drupal console within subdirs
curl https://drupalconsole.com/installer -L -o drupal.phar
mv drupal.phar /usr/local/bin/drupal
chmod +x /usr/local/bin/drupal

# init drupal project console
COMMAND="drupal init --destination=${PROJECT_DIR}/console/ -q"
su - admin -c "${COMMAND}"

# copy chain files required for drupal project
COMMAND="cp ${PROJECT_DIR}/vendor/drupal/console-core/dist/chain/* ${PROJECT_DIR}/console/chain"
su - admin -c "${COMMAND}"

# apply chain overlays
if [ -d "${OVERLAY_DIR}" ]; then
    cp -f ${OVERLAY_DIR}${PROJECT_DIR}/console/chain/* ${PROJECT_DIR}/console/chain
    chown admin:adm ${PROJECT_DIR}/console/chain/*
    MESSSAGE="Applied console chain files for ${PROJECT_DIR}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
fi

# change to drupal dir
COMMAND="cd ${APP_DIR}"
su - admin -c "${COMMAND}"

# clean up mod_php5 references in ${APP_DIR}
find ${APP_DIR} -type f -exec sed -i -e 's/mod_php5/mod_php7/g' {} \;

# add drush symlinks
ln -sf ${PROJECT_DIR}/vendor/drush/drush/drush /usr/local/bin/drush
ln -sf ${PROJECT_DIR}/vendor/drush/drush/drush.complete.sh /etc/bash_completion.d/drush

# add drush configs
mkdir -p /etc/drush
cat > /etc/drush/drushrc.php <<EOF
<?php
// by default use the drupal root directory
\$options['r'] = '${APP_DIR}';
EOF

# update nodejs to latest
npm cache clean -f
npm install -g n
n stable

# update npm to latest
npm install -g npm@latest
touch /usr/bin/npm
rm /usr/bin/npm
ln -s /usr/local/bin/npm /usr/bin/npm

# install gulp-cli
npm install -g gulp-cli

# copy custom package.json
if [ -d "${OVERLAY_DIR}" ]; then
    cp -f ${OVERLAY_DIR}${PROJECT_DIR}/web/themes/package.json ${PROJECT_DIR}/web/themes
    MESSSAGE="Applied gulp package.json for ${PROJECT_DIR}/web/themes."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
fi

# set cssadmin perms
chown -R cssadmin:cssadmin ${PROJECT_DIR}/web/themes

# preload node_modules for themes
# background safe: depends on gulp-cli
su - cssadmin -c "cd ${PROJECT_DIR}/web/themes && npm install --unsafe-perm"

# update settings
CONF=${PROJECT_DIR}/web/sites/default/settings.php
cp ${PROJECT_DIR}/web/sites/default/default.settings.php ${CONF}

# insert "www.example.com" as default trusted_host (inithook will adjust)
NEW_LINES="\$settings['trusted_host_patterns'] = array\(\n\t'^www\\\.example\\\.com\$',\n\);\n"
sed -i "/trusted_host_patterns/,/\*\//{n;s|^$|${NEW_LINES}|}" ${CONF}

# disable poor mans cron and setup drush cron
cat >> ${CONF} <<EOF

/**
 * Disable Poor Man's Cron:
 *
 * Drupal 8 enables the built-in Poor Man's Cron by default.
 * Poor Man's Cron relies on site activity to trigger Drupal's cron,
 * and is not well suited for low activity websites.
 *
 * We will use the Linux system cron and override Poor Man's Cron
 *
 * To re-enable Poor Man's Cron:
 *    Comment out the line below, and disable the system cron
 *    in /etc/cron.hourly/drupal8
 */
\$config['automated_cron.settings']['interval'] = 0;
EOF

# Loop through all sites in drupal.
# Drupal sites, by custom scripted design, will have a "." in their directory name.
CRON_DRUPAL=/etc/cron.daily/drupal8
cat > ${CRON_DRUPAL} <<EOF
#!/bin/bash -e
# Trigger drush cron
# Alternatively Drupal's poor mans cron: sites/default/settings.php
[ -x /usr/local/bin/drush ] || exit 0
# su www-data -c "/usr/local/bin/drush --quiet cron"
# su www-data -s /bin/bash -c "/usr/local/bin/drush --quiet cron"
# Drupal sites, by custom scripted design, will have a "." in their directory name.
sites=()
while read -r -d ''; do
    sites+=("\$REPLY")
done < <(cd ${PROJECT_DIR}/web/sites/; find *.* -maxdepth 0 -type d -print0)
# Run cron on the sites.
len=\${#sites[*]}
for((i=0; i<\$len; i++)); do
    su www-data -s /bin/bash -c "/usr/local/bin/drush -r ${APP_DIR} --uri=http://\${sites[\${i}]} --quiet cron"
done
EOF
chmod +x ${CRON_DRUPAL}

# configure apache
a2enmod rewrite

# create base site
${FORMAVID}/bin/deploy/python/create-drupal-stack.py

# log completed
MESSSAGE="Package ${PACKAGE} install has completed."
echo ${MESSSAGE} >> ${LOG}

exit 0
