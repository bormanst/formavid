#!/bin/bash -e
# Copyright (C) 2022 Sean Borman <bormanst@gmail.com>.
# You should have received LICENSE.txt, a copy of the
# GNU General Public License, along with this program.
# If not, see <https://www.gnu.org/licenses/>.

PACKAGE=invoiceninja

# log check
MESSSAGE="Checking dependencies for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# check packages
PKG_CHECK=${PACKAGE^^}
if [ -z "${!PKG_CHECK}" ]; then exit 0; fi

# check dir
APP_DIR=${WEBROOT}/${PACKAGE}
if [ -d "${APP_DIR}" ]; then
    MESSSAGE="The ${APP_DIR} already exists. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! ${PACKAGE} may have already been initialized by this script."
    echo "WARNING! Re-running this script may corrupt existing system."
    echo "WARNING! Please review script in applications/${PACKAGE} for further details."
    echo ""
    echo ""
    exit 0
fi

# dependencies check: mysql
DEPENDS=mysql
systemctl start ${DEPENDS} && sleep 10
if ! (systemctl -q is-active ${DEPENDS}); then
    MESSSAGE="Required service ${DEPENDS} not active. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! Please ensure that ${DEPENDS} is active."
    echo ""
    echo ""
    exit 0
fi

# dependencies check: apache2
DEPENDS=apache2
systemctl start ${DEPENDS} && sleep 10
if ! (systemctl -q is-active ${DEPENDS}); then
    MESSSAGE="Required service ${DEPENDS} not active. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! Please ensure that ${DEPENDS} is active."
    echo ""
    echo ""
    exit 0
fi

# dependencies check: php
DEPENDS=php
if ! hash ${DEPENDS} 2>/dev/null; then
    MESSSAGE="Required service ${DEPENDS} not active. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! Please ensure that ${DEPENDS} is active."
    echo ""
    echo ""
    exit 0
fi

# dependencies check: git
DEPENDS=git
if ! hash ${DEPENDS} 2>/dev/null; then
    MESSSAGE="Required service ${DEPENDS} not active. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! Please ensure that ${DEPENDS} is active."
    echo ""
    echo ""
    exit 0
fi

# dependencies check: composer
DEPENDS=composer
if ! hash ${DEPENDS} 2>/dev/null; then
    MESSSAGE="Required service ${DEPENDS} not active. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! Please ensure that ${DEPENDS} is active."
    echo ""
    echo ""
    exit 0
fi

# log configure
MESSSAGE="Configuring ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# set subdomain for app
SUBDOMAIN="billing."

# create database
MESSSAGE="Creating database for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
DB_NAME=${PACKAGE}
DB_USER=${PACKAGE}
ROOT_CREDS="--user=root --password=${DB_PASS}"
MYSQL_ADMIN="/usr/bin/mysqladmin ${ROOT_CREDS}"
MYSQL_BATCH="/usr/bin/mysql ${ROOT_CREDS} --batch"
if (${MYSQL_ADMIN} create ${DB_NAME}); then
    # add database user
    ${MYSQL_BATCH} --execute "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO ${DB_USER}@localhost IDENTIFIED BY '${INVOICENINJA_PASS}'; FLUSH PRIVILEGES;"
else
    echo ""
    echo ""
    echo "WARNING! The ${DB_NAME} database already exists."
    echo "WARNING! Please drop the database before running this script."
    echo "WARNING! Be sure to make a backup if applicable."
    echo ""
    echo ""
    exit 0
fi

# install version
VERSION="v5.5.50"
MESSSAGE="Installing ${VERSION} distro zip for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
URL="https://github.com/invoiceninja/invoiceninja/releases/download/${VERSION}/invoiceninja.zip"
wget -qO- -O ${PACKAGE}.zip ${URL}
mkdir ${APP_DIR}
unzip -qq ${PACKAGE}.zip -d ${APP_DIR}
rm ${PACKAGE}.zip
CONF=${APP_DIR}/.env
if [ -f "${CONF}" ]; then
    rm ${CONF}
fi

# apply overlay
OVERLAY_DIR=$1/overlay
if [ -d "${OVERLAY_DIR}" ]; then
    cp -rf ${OVERLAY_DIR}/* /
    MESSSAGE="Applied overlay for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
fi

# set log
touch ${APP_DIR}/worker.log

# update CONF
cp ${APP_DIR}/.env.example ${CONF}
sed -i "s/^APP_URL=.*/APP_URL=http:\/\/${SUBDOMAIN}${APP_HOSTNAME}/g" ${CONF}
sed -i "s/^DB_DATABASE=.*/DB_DATABASE=${DB_NAME}/g" ${CONF}
sed -i "s/^DB_HOST=.*/DB_HOST=localhost/g" ${CONF}
sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=${INVOICENINJA_PASS}/g" ${CONF}
sed -i "s/^DB_PORT=.*/DB_PORT=3306/g" ${CONF}
sed -i "s/^DB_USERNAME=.*/DB_USERNAME=${DB_USER}/g" ${CONF}
sed -i "s/^QUEUE_CONNECTION=.*/QUEUE_CONNECTION=database/g" ${CONF}
sed -i "/^QUEUE_CONNECTION/ a INTERNAL_QUEUE_ENABLED=false" ${CONF}
sed -i "s/^UPDATE_SECRET=.*/UPDATE_SECRET=updatesecret/g" ${CONF}

# clean up mod_php5 references in htaccess
MESSSAGE="Replacing mod_php5 with mod_php8 all .htaccess within dir ${APP_DIR} ..."
echo ${MESSSAGE} | tee -a ${LOG}
find ${APP_DIR} -name ".htaccess" -exec sed -i -e 's/mod_php5/mod_php8/g' {} \;
MESSSAGE="Finished replacing mod_php5 with mod_php8 all .htaccess within dir ${APP_DIR}."
echo ${MESSSAGE} | tee -a ${LOG}

# clean up mod_php7 references in htaccess
MESSSAGE="Replacing mod_php7 with mod_php8 all .htaccess within dir ${APP_DIR} ..."
echo ${MESSSAGE} | tee -a ${LOG}
find ${APP_DIR} -name ".htaccess" -exec sed -i -e 's/mod_php7/mod_php8/g' {} \;
MESSSAGE="Finished replacing mod_php7 with mod_php8 all .htaccess within dir ${APP_DIR}."
echo ${MESSSAGE} | tee -a ${LOG}

# set permissions
MESSSAGE="Setting perms for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
chown -R www-data:www-data ${APP_DIR}
find ${APP_DIR} -type d -exec chmod 755 {} \;

# install snappdf library and make it default for PDF generation
runuser -l www-data -s /bin/bash -c "${APP_DIR}/vendor/bin/snappdf download"
sed -i "\|^PDF_GENERATOR|s|=.*|=snappdf|" ${CONF}

# create etc dir
ETC=/etc/${PACKAGE}
mkdir -p ${ETC}

# apache2: create conf
MESSSAGE="Configuring apache for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
CONF=${ETC}/apache.conf
cat > ${CONF} <<EOF
<VirtualHost *:80>
    ServerName ${SUBDOMAIN}${APP_HOSTNAME}
    ServerAdmin webmaster@localhost
    UseCanonicalName Off
    ErrorLog \${APACHE_LOG_DIR}/error.log
    CustomLog \${APACHE_LOG_DIR}/access.log combined
    DocumentRoot ${APP_DIR}/public
    <Directory ${APP_DIR}/public>
        Options +FollowSymlinks
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>
EOF

# apache2: set conf perms
chmod 0644 ${CONF}

# apache2: link conf file
AVAILABLE=/etc/apache2/sites-available
ln -s ${CONF} ${AVAILABLE}/zzz-${PACKAGE}.conf

# apache2: enable conf
a2enmod rewrite
a2ensite zzz-${PACKAGE}

# add hosts entry
MESSSAGE="Adding host entry for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
sed -i "/127.0.0.1/s/$/ ${SUBDOMAIN}${APP_HOSTNAME}/" /etc/hosts

# initialize admin info
MESSSAGE="Initializing admin info for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
${FORMAVID}/bin/initialize/python/${PACKAGE}.py

# log completed
MESSSAGE="Package ${PACKAGE} install has completed."
echo ${MESSSAGE} | tee -a ${LOG}

exit 0
