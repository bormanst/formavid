#!/bin/bash
# Copyright (C) 2018 Sean Borman <bormanst@gmail.com>.
# You should have received LICENSE.txt, a copy of the
# GNU General Public License, along with this program.
# If not, see <https://www.gnu.org/licenses/>.

# set password length
PASSWORD_LENGTH=8

# single password
use_single_password () {
    # blank password
    PASSWORD=""
    # loop until valid password/check
    until [[ ${#PASSWORD} -ge ${PASSWORD_LENGTH} && "${PASSWORD}" == *[A-Z]* && "${PASSWORD}" == *[a-z]* && "${PASSWORD}" == *[0-9]* ]]; do
        # notify password restrictions
        printf "\nPassword must:\nbe at least ${PASSWORD_LENGTH} characters long\nhave at least one digit\nhave at least one Upper case Alphabet\nhave at least one Lower case Alphabet\n\n"
        # get password
        read -p "Please enter password for appliance:" -s PASSWORD
        printf "\n"
        # confirm password
        read -p "Please confirm password for appliance:" -s CHECK
        # check passwords match
        if [ "${PASSWORD}" == "${CHECK}" ]; then
            # get passwords
            for TYPE in ${PASS_REQ_LIST}; do export ${TYPE}=${PASSWORD}; done
            printf "\n"
        else
            # blank password
            PASSWORD=""
            # notify passwords do not match
            printf "\n\n\n***Passwords do not match***\n\n"
        fi
    done
}

# individual passwords
use_multi_password () {
    # get passwords
    for TYPE in ${PASS_REQ_LIST}; do
        # blank password
        PASSWORD=""
        # loop until valid password/check
        until [[ ${#PASSWORD} -ge ${PASSWORD_LENGTH} && "${PASSWORD}" == *[A-Z]* && "${PASSWORD}" == *[a-z]* && "${PASSWORD}" == *[0-9]* ]]; do
            # notify password restrictions
            printf "\nPassword must:\nbe at least ${PASSWORD_LENGTH} characters long\nhave at least one digit\nhave at least one Upper case Alphabet\nhave at least one Lower case Alphabet\n\n"
            # get password
            read -p "Please enter password for ${TYPE}:" -s PASSWORD
            printf "\n"
            # confirm password
            read -p "Please confirm password for ${TYPE}:" -s CHECK
            # check passwords match
            if [ "${PASSWORD}" == "${CHECK}" ]; then
                # export match: invalids will be overwritten
                export ${TYPE}=${PASSWORD}
                printf "\n"
            else
                # blank password
                PASSWORD=""
                # notify passwords do not match
                printf "\n\n\n***Passwords do not match***\n\n"
            fi
        done
    done
}

# check single default password
if [[ ! -z "${1// }" ]]; then
    # assign default password
    echo "$( date ) Using single default password." >> ${LOG}
    for TYPE in ${PASS_REQ_LIST}; do export ${TYPE}=${1}; done
else
    echo "$( date ) Using multi selected passwords." >> ${LOG}
    echo ""
    echo "Appliance passwords:"
    echo ""
    echo "It is recommended, for security reasons, to use different passwords for each application."
    echo "However, the same password can be used throughout the appliance if desired."
    echo "This can be useful if the appliance is managed by a single user."
    echo "It is not Single-Sign-On so passwords have to be entered per use."
    echo "Passwords can always be changed at a later time."
    echo ""
    # ask single_password
    read -p "Use same password for all appliance access (y/n)?" CHOICE
    case "${CHOICE^^}" in
        Y|YES ) use_single_password;;
        * ) use_multi_password;;
    esac
fi
