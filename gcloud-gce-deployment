#!/bin/bash -e
# Copyright (C) 2018 Sean Borman <bormanst@gmail.com>.
# You should have received LICENSE.txt, a copy of the
# GNU General Public License, along with this program.
# If not, see <https://www.gnu.org/licenses/>.

printf "\n\n\n"
printf "Copyright (C) 2018 Sean Borman <bormanst@gmail.com>\n"
printf "This program is free software: you can redistribute it and/or modify\n"
printf "it under the terms of the GNU General Public License as published by\n"
printf "the Free Software Foundation, either version 3 of the License, or\n"
printf "(at your option) any later version.\n"
printf "\n"
printf "This program is distributed in the hope that it will be useful,\n"
printf "but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
printf "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n"
printf "GNU General Public License for more details.\n"
printf "\n"
printf "You should have received a copy of the GNU General Public License\n"
printf "along with this program. If not, see <https://www.gnu.org/licenses/>.\n"
printf "\n\n"

# Recommended: link/command
# 1) Install Python 2.7 (available via apt for most systems): https://www.python.org/download/releases/2.7/
# 2) Install gcloud: https://cloud.google.com/sdk/docs/quickstarts
# 3) Initialize gcloud: gcloud --quiet --account=${GCS_ACCOUNT} init --console-only
# 4) Create project: gcloud --quiet --account=${GCS_ACCOUNT} projects create ${GCS_PROJECT_ID} --folder=${GCS_FOLDER} --no-enable-cloud-apis --name=${GCS_NAME} --set-as-default
# 5) Enable billing: https://console.cloud.google.com/storage/browser?project=${GCS_PROJECT_ID}
# 6) Select GCE_REGION: gcloud compute regions list
# 7) Select GCE_ZONE: gcloud compute zones list
# 8) Update metadata: gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute project-info add-metadata --metadata google-compute-default-region=${GCE_REGION},google-compute-default-zone=${GCE_ZONE},serial-port-enable=1
# 9) Update gcloud: gcloud --quiet --account=${GCS_ACCOUNT} init --console-only
# 10) Create template: gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute instance-templates create ${GCE_TEMPLATE} --machine-type ${GCE_TYPE} --image-family debian-9 --image-project debian-cloud --boot-disk-size 10GB --tags=http-server,https-server --scopes=default,compute-rw,storage-full
# 11) Create GCE instance: gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute instances create ${GCE_INSTANCE} --source-instance-template ${GCE_TEMPLATE}
# 12) Create bucket: gsutil mb -p ${GCS_PROJECT_ID} -c ${GCS_BUCKET_TYPE} -l ${GCE_REGION} gs://${GCS_BUCKET}

# Create an environment variable for the correct distribution.
export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"

# Check for Cloud SDK apt list.
if [ ! -f "/etc/apt/sources.list.d/google-cloud-sdk.list" ]; then
    # Add the Cloud SDK distribution URI as a package source.
    echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    # Import the Google Cloud public key.
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    # Update and install Python 2.7 and the Cloud SDK.
    apt-get update
    apt-get install -y python2.7 google-cloud-sdk
fi

# Get account to use.
GCS_ACCOUNT=""
until [[ ${#GCS_ACCOUNT} -ge 4 && "${GCS_ACCOUNT}" == *[@]* && "${GCS_ACCOUNT}" == *[.]* ]]; do
  printf "\n"
  read -p "Please enter GCS user account [user@gmail.com]:" GCS_ACCOUNT
done
printf "\n"
# Force lowercase.
GCS_ACCOUNT="${GCS_ACCOUNT,,}"

# Get DOMAIN.
DOMAIN=""
until [[ ${#DOMAIN} -ge 3 && "${DOMAIN}" == *[.]* ]]; do
  printf "\n"
  read -p "Please enter domain for the appliance [www.examplesitename.com]:" DOMAIN
done
printf "\n"
# Force lowercase.
DOMAIN="${DOMAIN,,}"

# Set DOMAIN_NO_PERIODS.
DOMAIN_NO_PERIODS=`echo ${DOMAIN} | sed 's/\.//g'`

# Get SITETITLE.
set ${SITETITLE:="Example Site Name"}
printf "\n"
read -p "Please enter title for the appliance [${SITETITLE}]:" SITETITLE
printf "\n"

# Get APP_EMAIL.
APP_EMAIL=`echo "${DOMAIN}" | sed 's/www\.//'`
APP_EMAIL="admin@${APP_EMAIL}"

printf "\n"
printf "Please enter admin email for the appliance.\n\n"
read -p "Or press enter to select the default of [${APP_EMAIL}]:" OPTION
if [[ ! -z "${OPTION// }" ]]; then APP_EMAIL=${OPTION}; fi
printf "\n"
printf "Admin email for the appliance set to ${APP_EMAIL}.\n"
printf "\n"

# Solr: ask install.
printf "\n"
printf "Do you wish to install the Solr search server?\n"
printf "Although Drupal has built-in search capabilities,\n"
printf "Solr is a more robust search solution that requires a JVM.\n"
printf "It is not recommended for a f1-micro instance, but it will run.\n"
printf "Solr can always be activated at a later time if desired.\n"
printf "\n"
read -p "Install Solr (y/n)?" CHOICE
case "${CHOICE^^}" in
  Y|YES ) SOLR_INSTALL="True";;
  * ) SOLR_INSTALL="False";;
esac
printf "\n"

# BorgBackup: ask install.
printf "\n"
printf "Do you wish to configure BorgBackup server?\n"
printf "The appliance can utilize GCE Snapshots, as well as, BorgBackup.\n"
printf "It is best practice to use both when financially viable.\n"
printf "Be aware that archiving applications like BorgBackup can cause\n"
printf "egress limits to be exceeded and incur usage costs. Depending\n"
printf "on usage, there can be addtional costs associated with storage.\n"
printf "\n"
printf "It can be configured at a later time by setting the default_envars\n"
printf "value to True and running the deploy_appliance script again.\n"
printf "\n"
read -p "Configure BorgBackup (y/n)?" CHOICE
case "${CHOICE^^}" in
  Y|YES ) CONFIGURE_BORGBACKUP="True";;
  * ) CONFIGURE_BORGBACKUP="False";;
esac
printf "\n"

# Project IDs must be between 6 and 30 characters.
GCS_PROJECT_ID_MIN=6
GCS_PROJECT_ID_MAX=30
let TRAILING_MIN=${GCS_PROJECT_ID_MIN}-1
let TRAILING_MAX=${GCS_PROJECT_ID_MAX}-1

# Use one less to account for a dash.
let RSIZE=29-${#DOMAIN_NO_PERIODS}

# Initialize GCS_PROJECT_ID.
GCS_PROJECT_ID=""

printf "\n"
read -p "Use existing GCS project (y/n)?" CHOICE
case "${CHOICE^^}" in
  Y|YES ) EXISTING_PROJECT="True";;
  * ) EXISTING_PROJECT="False";;
esac
printf "\n"

if [ "${EXISTING_PROJECT}" == "True" ]; then
    # Select GCS_PROJECT_ID.
    PS3="Select one of the current GCE projects:"
    LIST=`gcloud projects list --format="value(PROJECT_ID)"`
    DATA=`echo ${LIST} | sed 's/\s/|/g'`
    OPTIONLIST=`echo ${LIST} | sed 's/\s/ /g'`
    OPTIONS=(${OPTIONLIST})
    select option in "${OPTIONS[@]}"; do
        if [ ! -z ${option} ]; then
            GCS_PROJECT_ID="${option}"
            break
        fi
    done
    printf "\n"
else
    # Generate random project id based on domain if possible.
    if [ ${RSIZE} -ge 6 ]; then
        # Get random extension.
        RANDOM_EXT=`head /dev/urandom | tr -dc a-z0-9 | head -c ${RSIZE}; echo ''`
        # Set example GCS_PROJECT_ID.
        GCS_PROJECT_ID="${DOMAIN_NO_PERIODS}-${RANDOM_EXT}"
        # Notify user.
        printf "\nProject Id must be unique and is NOT re-usable even if the project is deleted.\nA random Project Id, based on domain, has been generated.\nIt still has to pass a uniqueness test within gcloud.\n"
        # Prompt user.
        read -p "Is the Project Id of ${GCS_PROJECT_ID} alright to use (y/n)?" CHOICE
        case "${CHOICE^^}" in
          Y|YES ) :;;
          * ) GCS_PROJECT_ID="";;
        esac
        printf "\n"
    fi
    # Check GCS_PROJECT_ID exists.
    DATA=`gcloud projects list --format="value(PROJECT_ID)"`
    DATA=`echo ${DATA} | sed 's/\s/|/g'`
    if [[ ${GCS_PROJECT_ID} =~ ^${DATA}$ ]]; then
        printf "\nProject Id currently exists.\n"
        read -p "Continue using existing Project Id of ${GCS_PROJECT_ID} (y/n)?" CHOICE
        case "${CHOICE^^}" in
          Y|YES ) :;;
          * ) GCS_PROJECT_ID="";;
        esac
        printf "\n"
    fi
    # Verify format GCS_PROJECT_ID.
    until [[ ${#GCS_PROJECT_ID} -ge ${GCS_PROJECT_ID_MIN} && ${#GCS_PROJECT_ID} -le ${GCS_PROJECT_ID_MAX} && ! ( "${GCS_PROJECT_ID}" =~ [A-Z] ) && "${GCS_PROJECT_ID}" =~ ^[a-z] && "${GCS_PROJECT_ID}" == *[a-z0-9\-]* ]]; do
        # notify GCS_PROJECT_ID restrictions.
        printf "\nProject Id must:\nbe at least ${GCS_PROJECT_ID_MIN} characters long\nno more than ${GCS_PROJECT_ID_MAX} characters long\nmust start with a lowercase letter\ncan have lowercase ASCII letters, digits or hyphens\n"
        # get GCS_PROJECT_ID
        read -p "Please enter a Project Id to use:" GCS_PROJECT_ID
        printf "\n"
        # Check GCS_PROJECT_ID exists.
        if [[ ${GCS_PROJECT_ID} =~ ^${DATA}$ ]]; then
            printf "\nProject Id currently exists.\n"
            read -p "Continue using existing Project Id of ${GCS_PROJECT_ID} (y/n)?" CHOICE
            case "${CHOICE^^}" in
              Y|YES ) break;;
              * ) GCS_PROJECT_ID="";;
            esac
            printf "\n"
        fi
    done
fi

GCE_INSTANCE=""
until [[ ${#GCE_INSTANCE} -ge 1 ]]; do
  printf "\n"
  read -p "Please enter unique GCE instanceID to append to Project ID [${GCS_PROJECT_ID}-instanceID]:" GCE_INSTANCE
done
printf "\n"
# Force lowercase.
GCE_INSTANCE="${GCS_PROJECT_ID}-${GCE_INSTANCE,,}"

# Set remaining vars.
set ${GCS_FOLDER:="${GCS_PROJECT_ID}"}
set ${GCS_NAME:="FormaVid Appliance"}
set ${GCE_TYPE:="f1-micro"}
set ${GCE_TEMPLATE:="${GCE_TYPE}-template"}
set ${GCS_BUCKET_TYPE:="regional"}
set ${GCS_BUCKET:="${GCS_PROJECT_ID}-backup-${GCS_BUCKET_TYPE}"}

# Check create project.
if [[ ! ${GCS_PROJECT_ID} =~ ^${DATA}$ ]]; then
    # Try to create project:
    gcloud --quiet --account=${GCS_ACCOUNT} projects create ${GCS_PROJECT_ID} --folder=${GCS_FOLDER} --no-enable-cloud-apis --name=${GCS_NAME} --set-as-default
fi

# Select GCE_REGION.
GCE_REGION=""
PS3="Select one of the GCE regions (closest is best):"
DATA=`gcloud compute regions list --format="value(NAME)"`
DATA=`echo ${DATA} | sed 's/\s/ /g'`
OPTIONS=(${DATA})
select option in "${OPTIONS[@]}"; do
    if [ ! -z ${option} ]; then
        GCE_REGION="${option}"
        break
    fi
done
printf "\n"

# Select GCE_ZONE.
GCE_ZONE=""
PS3="Select one of the GCE zones:"
DATA=`gcloud compute zones list --format="value(NAME)"`
DATA=`echo ${DATA} | sed 's/\s/ /g'`
OPTIONS=(${DATA})
select option in "${OPTIONS[@]}"; do
    if [ ! -z ${option} ]; then
        GCE_ZONE="${option}"
        break
    fi
done
printf "\n"

printf "\n\n"
printf "GCE region:zone set to ${GCE_REGION}:${GCE_ZONE}."
printf "\n\n"

# Firewall: ask update.
printf "\n"
printf "Do you wish to open the default VPC firewall ports for the applaince?\n"
printf "Otherwise, the firewall will not be updated and as result some of the\n"
printf "appliance services may not be reachable in the expected fashion.\n"
printf "\n"
printf "If the project firewall has already been configured then skip this step.\n"
printf "In that case, it is recommended to manually adjust the firewall as needed\n"
printf "so as not to open a port that may have been intentionally closed.\n"
printf "\n"
printf "The script gcloud-vpc-firewall may be run at a later time or the\n"
printf "firewall can be manually configured using the console\n"
printf "https://console.cloud.google.com/networking/firewalls/list?project= \n"
printf "\n"
read -p "Update VPC firewall (y/n)?" CHOICE
case "${CHOICE^^}" in
  Y|YES ) FIREWALL_UPDATE="True";;
  * ) FIREWALL_UPDATE="False";;
esac
printf "\n"

# Update metadata.
gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute project-info add-metadata --metadata google-compute-default-region=${GCE_REGION},google-compute-default-zone=${GCE_ZONE},serial-port-enable=1

# Update gcloud.
printf '1\n1\n1\n' | gcloud --account=${GCS_ACCOUNT} init --console-only

# Ensure default project.
printf "\n"
printf "Setting default project to ${GCS_PROJECT_ID}."
gcloud config set core/project ${GCS_PROJECT_ID}
printf "\n"

# Create GCE template.
if ! ( gcloud --project=${GCS_PROJECT_ID} compute instance-templates describe ${GCE_TEMPLATE} >/dev/null 2>&1 ); then
    gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute instance-templates create ${GCE_TEMPLATE} --machine-type ${GCE_TYPE} --image-family debian-9 --image-project debian-cloud --boot-disk-size 10GB --tags=http-server,https-server --scopes=default,compute-rw,storage-full
fi

# Check GCE_INSTANCE exists.
DATA=`gcloud --project=${GCS_PROJECT_ID} compute instances list --format="value(NAME)"`
DATA=`echo ${DATA} | sed 's/\s/|/g'`
if [[ ${GCE_INSTANCE} =~ ^${DATA}$ ]]; then
    # Notify user of problem.
    printf "The instance of ${GCE_INSTANCE} already exists."
    printf "Deployment terminated."
    exit 0
else
    # Create GCE instance.
    gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute instances create ${GCE_INSTANCE} --zone=${GCE_ZONE} --source-instance-template ${GCE_TEMPLATE}
    # update local ssh access to instances
    gcloud compute config-ssh
fi

# Check configure borgbackup.
if [ "${CONFIGURE_BORGBACKUP}" == "True" ]; then
    # Enable billing: https://console.cloud.google.com/storage/browser?project=${GCS_PROJECT_ID}.
    printf "\n\n\n"
    printf "Billing needs to be enabled to create a regional backup bucket.\n"
    printf "Use the GCS user account ${GCS_ACCOUNT} for access.\n"
    printf "Please enable billing for project at:\n"
    printf "https://console.cloud.google.com/storage/browser?project=${GCS_PROJECT_ID}\n"
    printf "If the 'Enable billing' option does not appear then it is already enabled.\n"
    printf "Manage billing accounts at https://console.cloud.google.com/billing\n"
    printf "\n"
    read -p "Billing has been enabled for project ${GCS_PROJECT_ID} (y/n)?" CHOICE
    case "${CHOICE^^}" in
      Y|YES ) :;;
      * ) exit 0;;
    esac
    printf "\n"
    # Check storage json api enabled.
    DATA=`gcloud --project=${GCS_PROJECT_ID} services list --format="value(NAME)"`
    DATA=`echo ${DATA} | sed 's/\s/|/g'`
    GCE_API="storage-api.googleapis.com"
    if [[ ${GCE_API} =~ ^${DATA}$ ]]; then
        # Notify user of problem.
        printf "The API ${GCE_API} is already enabled.\n"
    else
        # Enable storage json api.
        gcloud --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} services enable ${GCE_API}
    fi
    # Check GCS_BUCKET exists.
    DATA=`gsutil ls -p ${GCS_PROJECT_ID}`
    DATA=`echo ${DATA} | sed 's/\s/|/g'`
    GCS_BUCKET_URL="gs://${GCS_BUCKET}/"
    if [[ ${GCS_BUCKET_URL} =~ ^${DATA}$ ]]; then
        printf "\n"
        printf "The storage bucket of ${GCS_BUCKET} already exists.\n"
        printf "If the borgbackup directory exists, it needs manual backup and removal.\n"
        printf "\n"
        printf "WARNING!!! It is important to backup prior to removing an archive.\n"
        printf "WARNING!!! If borgbackup directory exists, ensure a backup job is not\n"
        printf "WARNING!!! running and disable any cron related entries.\n"
        printf "\n"
        printf "Use the GCS user account ${GCS_ACCOUNT} for access.\n"
        printf "\n"
        read -p "Bucket directory ${GCS_BUCKET}/borgbackup can be created (y/n)?" CHOICE
        case "${CHOICE^^}" in
          Y|YES ) :;;
          * ) exit 0;;
        esac
        printf "\n"
    else
        # Create bucket.
        gsutil -q mb -p ${GCS_PROJECT_ID} -c ${GCS_BUCKET_TYPE} -l ${GCE_REGION} gs://${GCS_BUCKET}
    fi
fi

# Set firewall rules.
if [ "${FIREWALL_UPDATE}" == "True" ] ; then
    # Get/format FIREWALL_NAMES.
    FIREWALL_ALLOWS=`gcloud --project=${GCS_PROJECT_ID} compute firewall-rules list --format="value(ALLOW)"`
    FIREWALL_ALLOWS=`echo ${FIREWALL_ALLOWS} | sed 's/\s/|/g'`
    # Get/format FIREWALL_NAMES.
    FIREWALL_NAMES=`gcloud --project=${GCS_PROJECT_ID} compute firewall-rules list --format="value(NAME)"`
    FIREWALL_NAMES=`echo ${FIREWALL_NAMES} | sed 's/\s/|/g'`
    # Add firewall rules to GCE.
    NAME=default-allow-http
    ALLOW="tcp:80"
    PRIORITY="1000"
    if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
        gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
    fi
    NAME=default-allow-https
    ALLOW="tcp:443"
    PRIORITY="1000"
    if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
        gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
    fi
    NAME=ftp
    ALLOW="tcp:21"
    PRIORITY="50000"
    if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
        gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
    fi
    NAME=imap
    ALLOW="tcp:143"
    PRIORITY="50000"
    if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
        gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
    fi
    NAME=smtps
    ALLOW="tcp:587"
    PRIORITY="50000"
    if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
        gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
    fi
    NAME=imaps
    ALLOW="tcp:993"
    PRIORITY="50000"
    if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
        gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
    fi
    NAME=shellinabox
    ALLOW="tcp:12320"
    PRIORITY="50000"
    if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
        gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
    fi
    NAME=webmin
    ALLOW="tcp:12321"
    PRIORITY="50000"
    if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
        gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
    fi
    NAME=adminer
    ALLOW="tcp:12322"
    PRIORITY="50000"
    if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
        gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
    fi
    # Solr: check open firewall.
    if [ "${SOLR_INSTALL}" == "True" ] ; then
        NAME=solr
        ALLOW="tcp:8983"
        PRIORITY="50000"
        if [[ ! ${NAME} =~ ^${FIREWALL_NAMES}$ && ! ${ALLOW} =~ ^${FIREWALL_ALLOWS}$ ]]; then
            gcloud --quiet --account=${GCS_ACCOUNT} --project=${GCS_PROJECT_ID} compute firewall-rules create ${NAME} --allow=${ALLOW} --description=${NAME} --direction='INGRESS' --network='default' --priority=${PRIORITY} --source-ranges='0.0.0.0/0'
        fi
    fi
fi

# Ask deploy appliance.
printf "\n"
read -p "Finish deploying the appliance (y/n)?" CHOICE
case "${CHOICE^^}" in
  Y|YES ) DEPLOY_APPLIANCE="True";;
  * ) DEPLOY_APPLIANCE="False";;
esac
printf "\n"

# Check deploy.
if [ "${DEPLOY_APPLIANCE}" == "True" ]; then
    # Get default password.
    PASSWORD=""
    PASSWORD_LENGTH=8
    printf "\nWill use a single password for all appliance access.\nThe password(s) can be changed anytime after the deployment has completed.\n"
    # Loop until valid password/check.
    until [[ ${#PASSWORD} -ge ${PASSWORD_LENGTH} && "${PASSWORD}" == *[A-Z]* && "${PASSWORD}" == *[a-z]* && "${PASSWORD}" == *[0-9]* ]]; do
        # Notify password restrictions.
        printf "\nPassword must:\nbe at least ${PASSWORD_LENGTH} characters long\nhave at least one digit\nhave at least one Upper case Alphabet\nhave at least one Lower case Alphabet\n\n"
        # Get password.
        read -p "Please enter default password for appliance:" -s PASSWORD
        printf "\n"
        # Confirm password.
        read -p "Please confirm default password for appliance:" -s CHECK
        # Check passwords match.
        if [ ! "${PASSWORD}" == "${CHECK}" ]; then
            # Blank password.
            PASSWORD=""
            # Notify passwords do not match.
            printf "\n\n\n***Passwords do not match***\n\n"
        fi
    done
    printf "\n\n"
    # Create initial stack ask.
    printf "\n"
    printf "The required information has been gathered to create the main drupal site.\n"
    printf "It is recommended to deploy the initial drupal stack during appliance creation\n"
    printf "but customizations can be made prior to manually running the python script\n"
    printf "create-drupal-stack.py for the initial stack creation.\n"
    printf "\n"
    read -p "Create the initial drupal stack for the appliance (y/n)?" CHOICE
    case "${CHOICE^^}" in
      Y|YES ) CREATE_DRUPAL_STACK="True";;
      * ) CREATE_DRUPAL_STACK="False";;
    esac
    printf "\n"
    # Get USER.
    USER=${GCS_ACCOUNT%@*}
    # Commands to deploy.
    COMMANDS="sudo apt-get update && sudo apt-get install -y git && sudo git clone https://github.com/bormanst/formavid /usr/local/formavid && sudo /usr/local/formavid/bin/deploy_appliance ${DOMAIN} \"${SITETITLE}\" ${APP_EMAIL} ${GCS_PROJECT_ID} ${GCE_REGION} ${GCS_BUCKET_TYPE} ${GCS_BUCKET} ${CONFIGURE_BORGBACKUP} ${SOLR_INSTALL} ${CREATE_DRUPAL_STACK} ${PASSWORD}"
    # Remote deploy.
    gcloud compute ssh ${USER}@${GCE_INSTANCE} --zone=${GCE_ZONE} --command="${COMMANDS}"
    # Check wipe accounts.
    printf "\n"
    printf "Do you wish to remove the GCE account used to create the appliance?\n"
    printf "It can always be re-created and is only used for GCE access.\n"
    printf "The other accounts used for the appliance itself are not affected.\n"
    printf "\n"
    read -p "Remove the GCE account used to create the appliance (y/n)?" CHOICE
    case "${CHOICE^^}" in
      Y|YES ) REMOVE_ACCOUNT="True";;
      * ) REMOVE_ACCOUNT="False";;
    esac
    printf "\n"
    if [ "${REMOVE_ACCOUNT}" == "True" ]; then
        # Wipe any relics.
        RELIC=${USER}
        COMMANDS="if [ \$(grep -c '^${RELIC}:' /etc/passwd) -ne 0 ]; then sudo deluser --force --remove-home ${RELIC}; fi"
        COMMANDS="${COMMANDS} && ""if [ \$(grep -c '^${RELIC}:' /etc/group) -ne 0 ]; then sudo groupdel ${RELIC}; fi"
        RELIC=`whoami`
        if [ "${RELIC}" != "root" ]; then
            COMMANDS="${COMMANDS} && ""if [ \$(grep -c '^${RELIC}:' /etc/passwd) -ne 0 ]; then sudo deluser --force --remove-home ${RELIC}; fi"
            COMMANDS="${COMMANDS} && ""if [ \$(grep -c '^${RELIC}:' /etc/group) -ne 0 ]; then sudo groupdel ${RELIC}; fi"
        fi
        gcloud compute ssh admin@${GCE_INSTANCE} --zone=${GCE_ZONE} --command="${COMMANDS}"
    fi
fi

printf "\n\n\n"
printf "Post install manual configuration considerations:\n\n"
printf "Cloud Console is located at:\n"
printf "https://console.cloud.google.com/compute/instances?project=${GCS_PROJECT_ID}\n\n"
printf "Cloud Console - Instance edit: Resize instance type if desired.\n"
printf "Cloud Console - Instance edit: Enable instance 'delete protection' if desired.\n"
printf "Cloud Console - Instance edit: Enable instance static ip address if desired.\n"
printf "Cloud Console - Disable any unused firewall entries in GCE project firewall.\n"
printf "Bash (admin sudo) - Disable any unused services: systemctl disable servicename\n"
printf "Bash (admin sudo) - Add any addtional sites:\n"
printf "    /usr/local/formavid/bin/deploy/python/create-drupal-stack.py\n"
printf "Update DNS entries at hosting service.\n"
printf "Bash (admin sudo) - Activate Certbot (optional):\n"
printf "    Set: /etc/formavid/default_envars/CERTBOT_INSTALL=\"True\"\n"
printf "    Set: /etc/formavid/default_envars/CREATE_DRUPAL_STACK=\"False\"\n"
printf "    Add domains and subdomains (optional):\n"
printf "        Modify /usr/local/formavid/applications/certbot/certbot\n"
printf "        Append domain(s) to command line \"certbot certonly ... -d domain\"\n"
printf "    If hacking local /etc/hosts for subdomain access then\n"
printf "        update DNS with temporary entries at hosting service.\n"
printf "    Deploy: /usr/local/formavid/bin/deploy_appliance\n"
printf "    If hacking local /etc/hosts for subdomain access then\n"
printf "        remove temporary DNS entries at hosting service.\n"
printf "    Set redirects (optional): Update drupal apache2 entries in\n"
printf "        /etc/apache2/sites-available with http to https redirects.\n"
printf "        In section <VirtualHost *:80> replace DocumentRoot line\n"
printf "        with RedirectPermanent / \"https://sitedomain/\"\n"
printf "Webmin - Disable any associated appliance firewall entries.\n"
printf "Bash (admin sudo) - Activate BorgBackup (optional).\n"
printf "    Set: /etc/formavid/default_envars/CONFIGURE_BORGBACKUP=\"True\"\n"
printf "    Deploy: /usr/local/formavid/bin/deploy_appliance\n"
printf "Cloud Console - Verify snapshot.\n"
printf "\n\n"

exit 0
