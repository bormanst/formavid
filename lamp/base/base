#!/bin/bash -e
# Copyright (C) 2018 Sean Borman <bormanst@gmail.com>.
# You should have received LICENSE.txt, a copy of the
# GNU General Public License, along with this program.
# If not, see <https://www.gnu.org/licenses/>.

PACKAGE=base

# log check
MESSSAGE="Checking dependencies for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# check packages
PKG_CHECK=${PACKAGE^^}
if [ -z "${!PKG_CHECK}" ]; then exit 0; fi

# check dir
APP_DIR=${WEBROOT}/admin
if [ -d "${APP_DIR}" ]; then
    MESSSAGE="The ${APP_DIR} already exists. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! ${PACKAGE} may have already been initialized by this script."
    echo "WARNING! Re-running this script may corrupt existing system."
    echo "WARNING! Please review script for further details."
    echo ""
    echo ""
    exit 0
fi

# log configure
MESSSAGE="Configuring ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# apply overlay
OVERLAY_DIR=$1/overlay
if [ -d "${OVERLAY_DIR}" ]; then
    cp -rf ${OVERLAY_DIR}/* /
    MESSSAGE="Applied overlay for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
fi

# clean up mod_php5 references in htaccess
MESSSAGE="Replacing mod_php5 with mod_php7 all .htaccess within dir ${APP_DIR} ..."
echo ${MESSSAGE} | tee -a ${LOG}
find ${APP_DIR} -name ".htaccess" -exec sed -i -e 's/mod_php5/mod_php7/g' {} \;
MESSSAGE="Finished replacing mod_php5 with mod_php7 all .htaccess within dir ${APP_DIR}."
echo ${MESSSAGE} | tee -a ${LOG}

# create admin
USER=admin
if [ $(grep -c "^${USER}:" /etc/passwd) -eq 0 ]; then
    useradd -U -m -s /bin/bash ${USER}
    usermod -aG sudo ${USER}
    su - ${USER} -c "echo ${USER}:${APP_PASS} | chpasswd"
fi

# create cssadmin user
USER=cssadmin
if [ $(grep -c "^${USER}:" /etc/passwd) -eq 0 ]; then
    useradd -U -m -s /bin/bash ${USER}
    su - ${USER} -c "echo ${USER}:${APP_PASS} | chpasswd"
    su - ${USER} -c "echo 'cd ${PROJECT_DIR}/web/themes' >> /home/${USER}/.bashrc"
fi

# tools: add hosts entry
sed -i "/127.0.0.1/s/$/ admin.${APP_HOSTNAME}/" /etc/hosts

# tools: update admin pages
sed -i "s/sedlowername/${SITENAME}/g" ${APP_DIR}/*.php
sed -i "s/sedsitename/${SITETITLE}/g" ${APP_DIR}/*.php
sed -i "s/sedhostname/${APP_HOSTNAME}/g" ${APP_DIR}/*.php

# check templates
TEMPLATES=/etc/formavid/templates
if [ ! -d "${TEMPLATES}" ]; then
    # mkdir is graceful so use it
    mkdir -p ${TEMPLATES}
    # make copy of templates
    cp -rp ${FORMAVID}/templates/* ${TEMPLATES}
    # configure templates
    DEFAULT_HEADER=${TEMPLATES}/sites-template/header.txt
    # tools: update header
    sed -i "s/sedlowername/${SITENAME}/g" ${DEFAULT_HEADER}
    sed -i "s/sedsitename/${SITETITLE}/g" ${DEFAULT_HEADER}
    # tools: theme
    sed -i "/<head/r ${TEMPLATES}/sites-template/styles.txt" ${APP_DIR}/*.php
    sed -i "/<body/r ${DEFAULT_HEADER}" ${APP_DIR}/*.php
    sed -i "s/sedtoolname/Admin/g" ${APP_DIR}/*.php
    sed -i "s/sedbrsize/57px/g" ${APP_DIR}/*.php
fi

# set random early reboot when needed: 2 <= time < 5
RANDOM_EARLY_TIME="0$((2 + RANDOM % 3)):$((RANDOM % 6))$((RANDOM % 10))"

# config unattended-upgrades
CONF=/etc/apt/apt.conf.d/50unattended-upgrades
cat > ${CONF} <<EOF
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
Unattended-Upgrade::Mail "${APP_EMAIL}";

// Automatically upgrade packages from these
Unattended-Upgrade::Origins-Pattern {
      "o=Debian,a=stable";
      "o=Debian,a=stable-updates";
      "o=Debian,a=proposed-updates";
      "origin=Debian,codename=\${distro_codename},label=Debian-Security";
};

// You can specify your own packages to NOT automatically upgrade here
Unattended-Upgrade::Package-Blacklist {
//      "vim";
//      "libc6";
//      "libc6-dev";
//      "libc6-i686";

};

Unattended-Upgrade::MailOnlyOnError "true";
Unattended-Upgrade::Automatic-Reboot "true";
Unattended-Upgrade::Automatic-Reboot-Time "${RANDOM_EARLY_TIME}";
EOF

# config unattended-upgrades
CONF=/etc/apticron/apticron.conf
cat > ${CONF} <<EOF
EMAIL="${APP_EMAIL}"
DIFF_ONLY="1"
LISTCHANGES_PROFILE="apticron"
SYSTEM="${APP_HOSTNAME}"
NOTIFY_HOLDS="0"
NOTIFY_NO_UPDATES="0"
EOF

# config unattended-upgrades
CONF=/etc/apt/listchanges.conf
cat > ${CONF} <<EOF
[apt]
frontend=pager
confirm=true
email_address=${APP_EMAIL}
save_seen=/var/lib/apt/listchanges.db
which=news
EOF

# log completed
MESSSAGE="Package ${PACKAGE} install has completed."
echo ${MESSSAGE} | tee -a ${LOG}

exit 0
