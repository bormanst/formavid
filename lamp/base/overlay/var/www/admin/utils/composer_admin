#!/bin/bash -e
# Copyright (C) 2022 Sean Borman <bormanst@gmail.com>.
# You should have received LICENSE.txt, a copy of the
# GNU General Public License, along with this program.
# If not, see <https://www.gnu.org/licenses/>.

PACKAGE=composer_admin

# Check composer format.
JSON=$2/composer.json
if [ `grep -c '"replace": {' ${JSON}` != 0  ]; then
    # Notify format.
    printf "\n\nWARNING! The default ${JSON} is not compatible with this script."
    printf "\nWARNING! A one-time manual edit of ${JSON} is required."
    printf "\n\n\nWARNING! This script depends on drupal/core being a requirement."
    printf "\nWARNING! Please modify ${JSON} by adding drupal/core to the \"require\": {"
    printf "\nWARNING! section AND removing the corresponding \"replace\": { section."
    printf "\nWARNING! Then run this script or modify accordingly.\n\n"
    exit 0
fi

# Set log.
LOG=/var/log/formavid/update_drupal.log

# Set core update.
UPDATE_CORE=true

# Check input or default.
if [[ -z "$5" ]] || [[ $( echo "$5" | awk -F"." '{print NF-1}' ) != 2 ]]; then
    NEW_VER=$4
    UPDATE_CORE=false
fi

# Check update core.
if ${UPDATE_CORE}; then
    # Drupal core update via composer.
    MESSSAGE="$( date ) Updating core from $4 to $5 ..."
    echo ${MESSSAGE} | tee -a ${LOG}
else
    # Drupal core update via composer.
    MESSSAGE="$( date ) Core unchanged: checking update other components ..."
    echo ${MESSSAGE} | tee -a ${LOG}
fi

# Composer clear cache.
MESSSAGE="$( date ) Clearing $2 composer caches ..."
echo ${MESSSAGE} | tee -a ${LOG}
composer clear-cache -d $2 2>&1 | tee -a ${LOG}

# Check drupal dependencies.
MESSSAGE="$( date ) Check outdated drupal $2 components ..."
echo ${MESSSAGE} | tee -a ${LOG}
composer outdated -d $2 drupal/* 2>&1 | tee -a ${LOG}

# Set HAS_UPDATES.
HAS_UPDATES=false

# Check symfony dependencies.
if [ $(composer prohibits -d $2 drupal/core:$5 2>&1 | grep -c "There is no installed package depending on") != 1 ]; then
    # Update symfony dependencies.
    MESSSAGE="$( date ) Updating drupal $1 and symfony dependencies ..."
    echo ${MESSSAGE} | tee -a ${LOG}
    composer update -d $2 drupal/* symfony/* --with-dependencies 2>&1 | tee -a ${LOG}
    HAS_UPDATES=true
else
    # Update drupal dependencies.
    MESSSAGE="$( date ) Updating drupal $1 ..."
    echo ${MESSSAGE} | tee -a ${LOG}
    # Check no updates.
    if [ $(composer update -d $2 drupal/* --with-dependencies 2>&1 | tee -a ${LOG} | grep -c 'Nothing to install or update') != 1 ]; then HAS_UPDATES=true; fi
fi

# Check HAS_UPDATES.
if ${HAS_UPDATES}; then
    # Update sites.
    MESSSAGE="$( date ) Updating drupal $1 sites ..."
    echo ${MESSSAGE} | tee -a ${LOG}
    for CHILD_DIR in $(find $3/*.* -maxdepth 0 -mindepth 0 -type d | sort); do
        SITE_NAME=${CHILD_DIR##*/}
        # Get site name.
        DRUSH_EXECUTE="drush -r $2 -l http://${SITE_NAME}"
        # Update dbs.
        MESSSAGE="$( date ) Updating $1 database for ${SITE_NAME} ..."
        echo ${MESSSAGE} | tee -a ${LOG}
        ${DRUSH_EXECUTE} updatedb -y | tee -a ${LOG}
        # Clear caches.
        MESSSAGE="$( date ) Rebuilding $1 caches for ${SITE_NAME} ..."
        echo ${MESSSAGE} | tee -a ${LOG}
        ${DRUSH_EXECUTE} cr -y | tee -a ${LOG}
    done
fi

exit 0
