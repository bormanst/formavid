#!/bin/bash -e
# Copyright (C) 2018 Sean Borman <bormanst@gmail.com>.
# You should have received LICENSE.txt, a copy of the
# GNU General Public License, along with this program.
# If not, see <https://www.gnu.org/licenses/>.

PACKAGE=php

# log check
MESSSAGE="Checking dependencies for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# check packages
PKG_CHECK=${PACKAGE^^}
if [ -z "${!PKG_CHECK}" ]; then exit 0; fi

# check exists
# Note: post_max_size set below so using as a trigger
if [[ $(php -r "echo ini_get('post_max_size');") == "16M" ]]; then
    MESSSAGE="The memory_limit is already set. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! ${PACKAGE} may have already been initialized by this script."
    echo "WARNING! Re-running this script may corrupt existing system."
    echo "WARNING! Please review script for further details."
    echo ""
    echo ""
    exit 0
fi

# log configure
MESSSAGE="Configuring ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# function to set properties
setini() {

    file=$1
    var=$2
    val=$3

    count=$(grep -c $var $file) || true
    if [ "$count" -eq 0 ]; then
        echo "[WARNING] no match for $var in $file"
    elif [ "$count" -gt 1 ]; then
        echo "[FATAL] more than one match for $var in $file"
        exit 1
    else
        echo "  - $var=$val"
        sed -i "/^;* *$var *=/ s|^;* *$var|$var|g" $file
        sed -i "/^$var *=/ s|= *[^ ]\+|=$val|g" $file
    fi
}

# apply overlay
OVERLAY_DIR=$1/overlay
if [ -d "${OVERLAY_DIR}" ]; then
    cp -rf ${OVERLAY_DIR}/* /
    MESSSAGE="Applied overlay for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
fi

# use these defaults
set ${PHP_MEMORY_LIMIT:=256M}                  # php.ini default: 128MB
set ${PHP_POST_MAX_SIZE:=16M}                  # php.ini default: 8MB
set ${PHP_UPLOAD_MAX_FILESIZE:=100M}           # php.ini default: 2MB
set ${PHP_MAX_EXECUTION_TIME:=360}             # php.ini default: 30
set ${PHP_DATE_TIMEZONE:=`cat /etc/timezone`}  # php.ini default:

# should be ok defaults
set ${OPCACHE_INTERNAL_STR_BUFF:=8}            # php.ini default: 4(MB)
set ${OPCACHE_FAST_SHUTDOWN:=1}                # php.ini default: 0 (disabled)
set ${OPCACHE_REVALIDATE_FREQ:=360}            # php.ini default: 2 (seconds)

# update php.ini properties
MESSSAGE="Updating php.ini properties for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
cli_ini=cli/php.ini
for f in /etc/php/?.?/*/php.ini; do
    [ -f $f ] || continue
    echo "updating $f"
    # activate apache timezone
    sed -i "s|^;date.timezone.*|date.timezone = ${PHP_DATE_TIMEZONE}|" $f
    setini $f post_max_size ${PHP_POST_MAX_SIZE}
    setini $f upload_max_filesize ${PHP_UPLOAD_MAX_FILESIZE}
    if [ "${f%%$cli_ini}" = "$f" ]; then
        # adjust settings for Apache only (not cli)
        setini $f memory_limit ${PHP_MEMORY_LIMIT}
        setini $f max_execution_time ${PHP_MAX_EXECUTION_TIME}
        setini $f opcache.interned_strings_buffer ${OPCACHE_INTERNAL_STR_BUFF}
        setini $f opcache.fast_shutdown ${OPCACHE_FAST_SHUTDOWN}
        setini $f opcache.revalidate_freq ${OPCACHE_REVALIDATE_FREQ}
        # append disabled xdebug settings
        echo "; x-debug settings:" >> $f
        echo ";zend_extension=/usr/lib/php/20151012/xdebug.so" >> $f
        echo ";xdebug.remote_enable=1" >> $f
        echo ";xdebug.remote_host=127.0.0.1" >> $f
        echo ";xdebug.remote_port=9000" >> $f
        echo ";xdebug.remote_handler=dbgp" >> $f
        echo ";xdebug.remote_mode=req" >> $f
        echo ";xdebug.remote_autostart=false" >> $f
        echo ";xdebug.idekey=xdebug-atom" >> $f
        echo ";xdebug.remote_log=/var/log/apache2/xdebug.log" >> $f
        echo ";xdebug.collect_assignments=1" >> $f
        echo ";xdebug.collect_return=1" >> $f
        echo ";xdebug.collect_vars=1" >> $f
    else
        # adjust settings for cli only (not Apache)
        setini $f memory_limit -1
    fi
done

# update xdebug.ini defaults
MESSSAGE="Updating xdebug.ini properties for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
for f in /etc/php/?.?/cli/conf.d/20-xdebug.ini; do
    [ -f $f ] || continue
    echo "updating $f"
    echo "xdebug.max_nesting_level=256" >> $f
done

# configure modules
MESSSAGE="Configuring modules for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
phpdismod xdebug

# configure apache
a2enmod php8.1

# log completed
MESSSAGE="Package ${PACKAGE} install has completed."
echo ${MESSSAGE} | tee -a ${LOG}

exit 0
