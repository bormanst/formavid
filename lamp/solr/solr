#!/bin/bash -e
# Copyright (C) 2018 Sean Borman <bormanst@gmail.com>.
# You should have received LICENSE.txt, a copy of the
# GNU General Public License, along with this program.
# If not, see <https://www.gnu.org/licenses/>.

# limit resource impact
renice 10 $$
ionice -c2 -n7 -p$$

PACKAGE=solr

# check install
if [ "${SOLR_INSTALL}" != "True" ]; then
    MESSSAGE="default_envars:SOLR_INSTALL not set to 'True'. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
fi

# log check
MESSSAGE="Checking dependencies for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# check packages
PKG_CHECK=${PACKAGE^^}
if [ -z "${!PKG_CHECK}" ]; then exit 0; fi

if [ "${SOLR_INSTALL}" != "True" ]; then exit 0; fi

# check dir
APP_DIR=/usr/local/solr
if [ -d "${APP_DIR}" ]; then
    MESSSAGE="The ${APP_DIR} already exists. Skipping configuration for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
    echo "WARNING! ${PACKAGE} may have already been initialized by this script."
    echo "WARNING! Re-running this script may corrupt existing system."
    echo "WARNING! Please review script in applications/${PACKAGE} for further details."
    echo ""
    echo ""
    exit 0
fi

# log configure
MESSSAGE="Configuring ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}

# set version
SOLR_SPEC="7.5.0"

# modify to location of compressed tgz
SRC=/usr/local/src
SOLR_LOCAL=/usr/local/${PACKAGE}
SOLR_HOME=/var/lib/${PACKAGE}
SOLR_LOG=/var/log/${PACKAGE}
SOLR_OVERRIDES=/etc/default/solr.in.sh
INSTALL_SCRIPT="install_solr_service.sh"

# set default port
set ${SOLR_PORT:=8983}

# download
cd ${SRC}
curl -L -f -O "http://archive.apache.org/dist/lucene/solr/${SOLR_SPEC}/solr-${SOLR_SPEC}.tgz"
cd -

# solr archive
TGZ=${SRC}/solr-${SOLR_SPEC}.tgz

# Extract INSTALL_SCRIPT file inside parent/bin
# strip-components 2: removes parent/bin file structure
# no-anchored: searches recursively.
tar -zxf ${TGZ} --strip-components 2 --no-anchored -C ${SRC}/ ${INSTALL_SCRIPT}

# fix debian stretch issue in install script
# current SUSE option does the trick except for chkconfig
# so replace with a no-op ':'
sed -i "s/distro=Debian/distro=SUSE/g" ${SRC}/${INSTALL_SCRIPT}
sed -i '/chkconfig/a:' ${SRC}/${INSTALL_SCRIPT}
sed -i '/chkconfig/d' ${SRC}/${INSTALL_SCRIPT}

# make INSTALL_SCRIPT executable.
chmod +x ${SRC}/${INSTALL_SCRIPT}

# First arg must be compressed tgz
# i:install location (war,jars,etc.)
# d:data location(configs,indices,etc.)
# n:do not start service after install
# p:port number
# s:service name to run solr as
# u:user name for solr
${SRC}/${INSTALL_SCRIPT} ${TGZ} -i /usr/local -d ${SOLR_HOME} -p ${SOLR_PORT} -s ${PACKAGE} -u ${PACKAGE} -n

# apply overlay
OVERLAY_DIR=$1/overlay
if [ -d "${OVERLAY_DIR}" ]; then
    cp -rf ${OVERLAY_DIR}/* /
    MESSSAGE="Applied overlay for ${PACKAGE}."
    echo ${MESSSAGE} | tee -a ${LOG}
    echo ""
    echo ""
fi

# change log location
mkdir ${SOLR_LOG}
chown ${PACKAGE}:${PACKAGE} ${SOLR_LOG}
sed -i "s/solr.log=logs/solr.log=\/var\/log\/solr/g" ${SOLR_HOME}/log4j.properties

# solr overides
sed -i "s/SOLR_LOGS_DIR=\/var\/lib\/solr\/logs/SOLR_LOGS_DIR=\/var\/log\/solr/g" ${SOLR_OVERRIDES}

# logrotate file for solr
MESSSAGE="Creating logrotate file for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
FILE=/etc/logrotate.d/solr
cat > ${FILE} <<EOF
# Logrotate file for solr

/var/log/solr/*.log {
        compress
    delaycompress
        weekly
        missingok
        rotate 5
        notifempty
}
EOF

# set solr admin/drupal8 passwords
# ${FORMAVID}/bin/initialize/python/solr.py

# add ssl for solr protection
# https://lucene.apache.org/solr/guide/7_4/enabling-ssl.html#enabling-ssl

# initialize keystores
# cd ${SOLR_LOCAL}/server/etc
# keytool -genkeypair -alias solr-ssl -keyalg RSA -keysize 2048 -keypass secret -storepass secret -validity 9999 -keystore solr-ssl.keystore.jks -ext SAN=DNS:localhost,IP:127.0.0.1 -dname "CN=localhost, OU=Organizational Unit, O=Organization, L=Location, ST=State, C=Country"
# printf "secret\nsecret\nsecret\n" | keytool -importkeystore -srckeystore solr-ssl.keystore.jks -destkeystore solr-ssl.keystore.p12 -srcstoretype jks -deststoretype pkcs12
# openssl pkcs12 -passin pass:secret -passout pass:${APP_PASS} -in solr-ssl.keystore.p12 -out solr-ssl.pem

# update configs/port
MESSSAGE="Configuring access for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
FILE=/etc/default/solr.in.sh
sed -i "s|^SOLR_PID_DIR=\(.*\)|SOLR_PID_DIR=${SOLR_HOME}|" ${FILE}
sed -i "s|^SOLR_HOME=\(.*\)|SOLR_HOME=${SOLR_HOME}\/data|" ${FILE}
sed -i "s|^LOG4J_PROPS=\(.*\)|LOG4J_PROPS=${SOLR_HOME}|" ${FILE}
sed -i "s|^SOLR_LOGS_DIR=\(.*\)|SOLR_LOGS_DIR=${SOLR_LOG}|" ${FILE}
sed -i "s|^SOLR_PORT=\(.*\)|SOLR_PORT=${SOLR_PORT}|" ${FILE}
# sed -i "s|^#SOLR_SSL_ENABLED=|SOLR_SSL_ENABLED=|" ${FILE}
# sed -i "s|^#SOLR_SSL_KEY_STORE=\(.*\)|SOLR_SSL_KEY_STORE=etc\/solr-ssl.keystore.jks|" ${FILE}
# sed -i "s|^#SOLR_SSL_KEY_STORE_PASSWORD=\(.*\)|SOLR_SSL_KEY_STORE_PASSWORD=secret|" ${FILE}
# sed -i "s|^#SOLR_SSL_TRUST_STORE=\(.*\)|SOLR_SSL_KEY_STORE=etc\/solr-ssl.keystore.jks|" ${FILE}
# sed -i "s|^#SOLR_SSL_TRUST_STORE_PASSWORD=\(.*\)|SOLR_SSL_TRUST_STORE_PASSWORD=secret|" ${FILE}
# sed -i "s|^#SOLR_SSL_NEED_CLIENT_AUTH=|SOLR_SSL_NEED_CLIENT_AUTH=|" ${FILE}
# sed -i "s|^#SOLR_SSL_WANT_CLIENT_AUTH=|SOLR_SSL_WANT_CLIENT_AUTH=|" ${FILE}

# update configs/port
# FILE=${SOLR_LOCAL}/server/solr/solr.xml
# sed -i "s/jetty.port:8983/jetty.port:${SOLR_PORT}/" ${FILE}

# update configs/port
# FILE=${SOLR_HOME}/data/solr.xml
# sed -i "s/jetty.port:8983/jetty.port:${SOLR_PORT}/" ${FILE}

# add solr systemd
MESSSAGE="Configuring systemd for ${PACKAGE} ..."
echo ${MESSSAGE} | tee -a ${LOG}
FILE=/etc/systemd/system/solr.service
cat > ${FILE} <<EOF
[Unit]
Description=Apache SOLR
After=syslog.target network.target remote-fs.target nss-lookup.target systemd-journald-dev-log.socket
Before=multi-user.target graphical.target nginx.service
Conflicts=shutdown.target

[Service]
User=solr
PIDFile=${SOLR_HOME}/data/solr-${SOLR_PORT}.pid
Environment=SOLR_INCLUDE=${SOLR_OVERRIDES}
ExecStart=${SOLR_LOCAL}/bin/solr start
ExecStop=${SOLR_LOCAL}/bin/solr stop
PrivateTmp=true
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target graphical.target
EOF

# add security: encoded password is 'SolrRocks'
mkdir -p ${SOLR_HOME}/data
FILE=${SOLR_HOME}/data/security.json
cat > ${FILE} <<EOF
{
    "authentication":{
        "blockUnknown": true,
        "class":"solr.BasicAuthPlugin",
        "credentials":{"admin":"IV0EHq1OnNrj6gvRCwvFwTrZ1+z1oBbnQdiVC3otuq0= Ndd7LKvVBAaZIF0QAVi1ekCfAJXr1GGfLtRUXhgrF8c=", "drupal8":"IV0EHq1OnNrj6gvRCwvFwTrZ1+z1oBbnQdiVC3otuq0= Ndd7LKvVBAaZIF0QAVi1ekCfAJXr1GGfLtRUXhgrF8c="}
    },
    "authorization":{
        "class":"solr.RuleBasedAuthorizationPlugin",
        "permissions":[{"name":"security-edit", "role":"admin"},{"name":"read","role":"*"},{"name":"schema-read","role":"*"},{"name":"config-read","role":"*"},{"name":"collection-admin-read","role":"*"},{"name":"metrics-read","role":"*"},{"name":"core-admin-read","role":"*"}],
        "user-role":{"admin":"admin", "drupal8":"dev"}
    }
}
EOF

# set owner to solr
chown solr:solr /var/lib/solr/data/security.json

# update passwords
systemctl enable solr
systemctl start solr
curl -k --user admin:SolrRocks http://localhost:${SOLR_PORT}/solr/admin/authentication -H "Content-type:application/json" -d "{\"set-user\": {\"drupal8\":\"${APP_PASS}\"}}"
curl -k --user admin:SolrRocks http://localhost:${SOLR_PORT}/solr/admin/authentication -H "Content-type:application/json" -d "{\"set-user\": {\"admin\":\"${APP_PASS}\"}}"
systemctl stop solr

# open firewall ports in GCE/Webin
echo ""
echo "Be sure the GCE and webmin firewall ports are open if remote access is required."
echo "The default values is https:8983."
echo ""

# clean up
rm -rf ${SRC}/*${PACKAGE}*

# log completed
MESSSAGE="Package ${PACKAGE} install has completed."
echo ${MESSSAGE} | tee -a ${LOG}

exit 0
